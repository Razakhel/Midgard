layout(local_size_x = 1, local_size_y = 1, local_size_x = 1) in;

layout(r16f, binding = 0) uniform writeonly image2D uniNoiseMap;
uniform float uniNoiseFactor = 0.01;
uniform int uniOctaveCount   = 1;

const int permutations[512] = int[](
  151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
  8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
  35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
  134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
  55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
  18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226,
  250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182,
  189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
  172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97,
  228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239,
  107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
  138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,
  151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
  8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
  35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
  134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
  55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
  18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226,
  250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182,
  189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
  172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97,
  228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239,
  107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
  138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
);

const vec2 gradients2D[8] = vec2[](
  vec2(         1.0,           0.0), vec2(         -1.0,           0.0),
  vec2(         0.0,           1.0), vec2(          0.0,          -1.0),
  vec2(0.7071067691,  0.7071067691), vec2(-0.7071067691,  0.7071067691),
  vec2(0.7071067691, -0.7071067691), vec2(-0.7071067691, -0.7071067691)
);

float smootherstep(float value) {
  return value * value * value * (value * (value * 6.0 - 15.0) + 10.0);
}

vec2 recoverGradient2D(int x, int y) {
  return gradients2D[permutations[permutations[x] + y] % gradients2D.length()];
}

float computePerlin(vec2 coords) {
  // Recovering integer coordinates on the quad
  //
  //  y0+1______x0+1/y0+1
  //     |      |
  //     |      |
  // x0/y0______x0+1

  int intX = int(coords.x);
  int intY = int(coords.y);

  int x0 = intX & 255;
  int y0 = intY & 255;

  // Recovering pseudo-random gradients at each corner of the quad
  vec2 leftBotGrad  = recoverGradient2D(x0,     y0    );
  vec2 rightBotGrad = recoverGradient2D(x0 + 1, y0    );
  vec2 leftTopGrad  = recoverGradient2D(x0,     y0 + 1);
  vec2 rightTopGrad = recoverGradient2D(x0 + 1, y0 + 1);

  // Computing the distance to the coordinates
  //  _____________
  //  |           |
  //  | xWeight   |
  //  |---------X |
  //  |         | yWeight
  //  |_________|_|

  float xWeight = coords.x - float(intX);
  float yWeight = coords.y - float(intY);

  float leftBotDot  = dot(vec2(xWeight,       yWeight      ), leftBotGrad);
  float rightBotDot = dot(vec2(xWeight - 1.0, yWeight      ), rightBotGrad);
  float leftTopDot  = dot(vec2(xWeight,       yWeight - 1.0), leftTopGrad);
  float rightTopDot = dot(vec2(xWeight - 1.0, yWeight - 1.0), rightTopGrad);

  float smoothX = smootherstep(xWeight);
  float smoothY = smootherstep(yWeight);

  float botCoeff = mix(leftBotDot, rightBotDot, smoothX);
  float topCoeff = mix(leftTopDot, rightTopDot, smoothX);

  return mix(botCoeff, topCoeff, smoothY);
}

float computeFbm(vec2 coords, int octaveCount) {
  float frequency = 1.0;
  float amplitude = 1.0;
  float total     = 0.0;

  for (int i = 0; i < octaveCount; ++i) {
    total += computePerlin(coords * frequency) * amplitude;

    frequency *= 2.0;
    amplitude *= 0.5;
  }

  return (total + 1.0) / 2.0;
}

void main() {
  float noise = computeFbm(vec2(gl_GlobalInvocationID.xy) * uniNoiseFactor, uniOctaveCount);

  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
  imageStore(uniNoiseMap, pixelCoords, vec4(vec3(noise), 1.0));
}
