layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const vec3 waterColor  = vec3(0.0,  0.0,  1.0);
const vec3 grassColor  = vec3(0.24, 0.49, 0.0);
const vec3 groundColor = vec3(0.62, 0.43, 0.37);
const vec3 rockColor   = vec3(0.5,  0.5,  0.5);
const vec3 snowColor   = vec3(1.0,  1.0,  1.0);

layout(r16f, binding = 0) uniform readonly restrict image2D uniHeightmap;
layout(rgba8, binding = 1) uniform writeonly restrict image2D uniColorMap;

void main() {
  ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

  float height = imageLoad(uniHeightmap, pixelCoords).r;
  vec3 color   = (height < 0.33 ? mix(waterColor, grassColor, height * 3.0)
               : (height < 0.5  ? mix(grassColor, groundColor, (height - 0.33) * 5.75)
               : (height < 0.66 ? mix(groundColor, rockColor, (height - 0.5) * 6.0)
                                : mix(rockColor, snowColor, (height - 0.66) * 3.0))));

  // Applying gamma correction
  // This shouldn't be needed here, as ideally the texture should be read later as sRGB; but as it's not possible to use imageRead/Store() on an sRGB texture,
  //  and to avoid duplicating them to use distinct ones for write & read operations, this correction is applied
  color = pow(color, vec3(2.2));

  imageStore(uniColorMap, pixelCoords, vec4(color, 1.0));
}
